/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 09 21:27:21 GMT 2017
 */

package model.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import model.impl.CompteCourant;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompteCourant_ESTest extends CompteCourant_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CompteCourant compteCourant0 = new CompteCourant("", 1.0);
      double double0 = compteCourant0.withdraw(1.0);
      assertEquals(0.0, compteCourant0.getBalance(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CompteCourant compteCourant0 = new CompteCourant("");
      double double0 = compteCourant0.deposit(1.0);
      assertEquals(1.0, compteCourant0.getBalance(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CompteCourant compteCourant0 = new CompteCourant("");
      try { 
        compteCourant0.withdraw(1.0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Overdraft. Current balance = 0.0
         //
         verifyException("model.impl.CompteCourant", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CompteCourant compteCourant0 = new CompteCourant("");
      double double0 = compteCourant0.withdraw((-1898.407));
      assertEquals(1898.407, compteCourant0.getBalance(), 0.01);
      assertEquals(1898.407, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CompteCourant compteCourant0 = new CompteCourant("\n", 0.0);
      double double0 = compteCourant0.deposit(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CompteCourant compteCourant0 = new CompteCourant("Overdraft. Current balance = ");
      double double0 = compteCourant0.deposit((-1.0));
      assertEquals((-1.0), compteCourant0.getBalance(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }
}
